import React, { createContext, useEffect, useState } from "react";
import "../comp/css/artistprofile.css";

import varified from "../../asset/img/icon/verified.svg";
import plays from "../../asset/img/icon/play.svg";
import search from "../../asset/img/icon/search.svg";
import cancel from "../../asset/img/icon/cancel.svg";
import like from "../../asset/img/icon/like.svg";
import { Outlet, useLocation, useParams } from "react-router-dom";
import MusicList from "../comp/MusicList";
import MainAudioPlayer from "../comp/MainAudioPlayer"
import { baseFetch, onSkip } from "../..";
import useArtistMusicListContext from "../hooks/useArtistMusicListContext";
import useMainSongContext from "../hooks/useMainSongContext";
import useLoginContext from "../hooks/useLoginContext";

export default function ArtistProfile() {
  // const params = useParams();
  const { userObject, dispatch } = useLoginContext();
  const [artistProfileData, setArtistProfileData] = useState();
  const { artistmusiclist, pinnedsong, musiclistdispatch } = useArtistMusicListContext()
  const { mainsong, mainsongdispatch } = useMainSongContext()
  const [searching, setSearching] = useState();
  const [fullScreen, setFullScreen] = useState();
  // const [error, setErrorMessage] = useState();
  const location = useLocation();
  const params = useParams()
  const username = params.username;
  const { refresh } = location.state || {};
  const [pageActive, setPageActive] = useState(true);

  // const [dialog, setDialog] = useState({

  //         heading: undefined,
  //         message: undefined,

  //         negative: {
  //         value: undefined,
  //         callback: undefined
  //         },

  //         positive: {
  //         value: undefined,
  //         callback: undefined,
  //         }
  // })

  useEffect(() => {
    setPageActive(true);
    
    (async() => {

      try{
        const responseObject = await baseFetch({
            route: '/artist/' + username,
            method: 'GET',
        })
        
        if(responseObject["success"] && responseObject['data']) {
          const userObject = JSON.parse(responseObject['data'])
          if(userObject['username'])
            setPageActive(true);
            setArtistProfileData(userObject);
            musiclistdispatch({ type: 'SET_LIST', payload: userObject['music']['all'] });
        }
              
      } catch(error) {
          // implement error page for not found artist etc
          console.log(error); 
      }
    })()

    return () => {
        setPageActive(true)
        setArtistProfileData(null)
        musiclistdispatch({ type: 'CLEAR_LIST' });
    }
  }, [username, refresh]);

  const onSkipLocal = (nextORprevious) => {
    onSkip(mainsong['i'], mainsongdispatch, artistmusiclist.length, nextORprevious)
  }

  const Logout = () => {
    mainsongdispatch({type: 'CLEAR_SONG'})
    musiclistdispatch({type: 'CLEAR_CONTEXT'})
    dispatch({type: 'LOGOUT'})
  }


  // JSX
  return (
    artistProfileData && <div className="profile-div-main-artist">
      { 
        artistProfileData && 
        (
        <div className="wrap-info-about" style={{ opacity: pageActive ? 1 : .5 }}>
          <nav>
            <div className="space-between">
              <h3 className="logo">Melodrift</h3>
                {
                  isLoggedIn ? 
                  <input className="default-button" style={{backgroundColor: 'red'}} type="button" value='logout' onClick={Logout} />
                  :
                  <input className="default-button" style={{backgroundColor: 'red'}} type="button" value='login or signup' onClick={() => navigate('/login')} />
                }
            </div>
            {/* <div className="nav-div-search">
              <input
                style={{ display: searching ? "unset" : "none" }}
                onFocus={() => setSearching(true)}
                className="input-search"
                type="text"
              />
              <div
                className={
                  searching
                    ? "search-div-result-list slideDown"
                    : "search-div-result-list"
                }
              >
                {searching ? <h4>searching</h4> : <p>not searching</p>}
              </div>
              <img
                onClick={() => setSearching(!searching)}
                className="i nav-img-search"
                src={searching ? cancel : search}
                alt="search"
              />
            </div> */}
          </nav>

          <div className="wrap-info-stats">
            <div className="info">
              <div className="wrap-name-varified">
                <h1 className="name">{artistProfileData.name}</h1>
                <img className="icon" src={varified} alt="verified" />
              </div>
              <p className="location">{artistProfileData.location}</p>
            </div>

            <div className="stats">
              <div>
                <img className="icon" src={like} alt="likes" />
                <p>{artistProfileData.likes}</p>
              </div>

              <div>
                <img className="icon" src={plays} alt="plays" />
                <p>{artistProfileData.plays}</p>
              </div>
            </div>
          </div>

          <div className="about">
            <input className="default-button" type="button" value="play all" onClick={() => mainsongdispatch({type: 'SET_SONG', payload: {i: 0}})} />
          </div>

        <div className="background">
            <div className="background-color" />
            <div className="background-color-two" />
            <img
              alt="background"
              src={artistProfileData.cover ? artistProfileData.cover : undefined}
              style={{ opacity: artistProfileData.cover ? 1 : 0 }}
              onError={(e) => {e.target.style.display = 'none'}}
            />
          </div>
        </div>
      )}

      {
        pinnedsong ?
        <MusicList 
          MusicListData={pinnedsong} 
          listTitle={'pinned song'}
          errorMessage='No song is pinned.'
          style={{ opacity: pageActive ? 1 : 0, paddingBottom: 'unset'}}
        />
        :
        null
      }

      <MusicList
        MusicListData={artistmusiclist}
        listTitle={"all music"}
        errorMessage='No music available. Upload!'
        style={{ opacity: pageActive ? 1 : 0 }}
        childStyle={{height: '30vh', overflowY: 'scroll'}}
      />

      <Outlet />
      {
            mainsong && artistmusiclist &&
            (
              <MainAudioPlayer 
              id={artistmusiclist[mainsong?.i]?.id}
              onSkip={onSkipLocal} 
              />
            )
            
      }
    </div>
  );
}
